// This file is auto-generated by @hey-api/openapi-ts

export type LoginDto = {
  /**
   * Email address
   */
  email: string;
  /**
   * User password
   */
  password: string;
};

export type AuthUserDto = {
  /**
   * User ID
   */
  id: string;
  /**
   * User email
   */
  email: string;
  /**
   * User role
   */
  accountType: 'customer' | 'partner';
  /**
   * User first name
   */
  firstName?: string;
  /**
   * User last name
   */
  lastName?: string;
  /**
   * User status
   */
  status?: 'active' | 'paused' | 'waiting_payment' | 'waiting_verification';
};

export type AuthResponseDto = {
  /**
   * JWT access token
   */
  accessToken: string;
  /**
   * User information
   */
  user: AuthUserDto;
};

export type CreatePartnerDto = {
  /**
   * The email of the partner
   */
  email: string;
  /**
   * The password of the partner
   */
  password: string;
  /**
   * The first name of the partner
   */
  first_name: string;
  /**
   * The last name of the partner
   */
  last_name: string;
  /**
   * The phone country code of the partner
   */
  phone_country_code: string;
  /**
   * The phone number of the partner
   */
  phone_number: string;
  /**
   * The type of the partner
   */
  type: 'network' | 'subnetwork' | 'franchise';
  /**
   * The default language of the partner
   */
  default_language: string;
  /**
   * The network ID of the partner
   */
  network_id?: string;
};

export type PartnerResponseDto = {
  /**
   * The ID of the partner
   */
  id?: string;
  /**
   * The email of the partner
   */
  email: string;
  /**
   * The first name of the partner
   */
  first_name: string;
  /**
   * The last name of the partner
   */
  last_name: string;
  /**
   * The phone country code of the partner
   */
  phone_country_code: string;
  /**
   * The phone number of the partner
   */
  phone_number: string;
  /**
   * The status of the partner
   */
  status: 'waiting_verification' | 'active' | 'paused' | 'waiting_payment';
  /**
   * The type of the partner
   */
  type: 'network' | 'subnetwork' | 'franchise';
  /**
   * The default language of the partner
   */
  default_language: string;
  /**
   * The network ID of the partner
   */
  network_id?: string;
  /**
   * The access token of the partner
   */
  accessToken?: string;
};

export type DomainUpdatePartnerDto = {
  /**
   * The email of the partner
   */
  email?: string;
  /**
   * The password of the partner
   */
  password?: string;
  /**
   * The first name of the partner
   */
  first_name?: string;
  /**
   * The last name of the partner
   */
  last_name?: string;
  /**
   * The phone country code of the partner
   */
  phone_country_code?: string;
  /**
   * The phone number of the partner
   */
  phone_number?: string;
  /**
   * The status of the partner
   */
  status?: 'waiting_verification' | 'active' | 'paused' | 'waiting_payment';
  /**
   * The type of the partner
   */
  type?: 'network' | 'subnetwork' | 'franchise';
  /**
   * The default language of the partner
   */
  default_language?: string;
};

export type DomainCreateNetworkDto = {
  /**
   * The type of the network
   */
  type: 'independent' | 'franchise';
  name?: string;
  primary_color: string;
  partner_id: string;
};

export type PointDto = {
  type: 'Point';
  coordinates: Array<number>;
};

export type CreateEstablishmentDto = {
  name: string;
  location?: PointDto;
  primary_color?: string;
  public_establishment_id: string;
  google_place_id?: string;
  address: string;
  neighborhood?: string;
  city: string;
  cep: string;
  logo_s3_key?: string;
  description?: string;
  price_range?: string;
  phone_number?: string;
  phone_country_code?: string;
};

export type OnboardingPartnerDto = {
  network: DomainCreateNetworkDto;
  establishments: Array<CreateEstablishmentDto>;
  network_logo?: Blob | File;
};

export type OnboardingPartnerResponseDto = {
  /**
   * L'ID de l'établissement
   */
  id: string;
  /**
   * Le nom de l'établissement
   */
  name: string;
  /**
   * L'adresse de l'établissement
   */
  address: string;
  /**
   * L'ID du réseau associé
   */
  network_id: string;
  /**
   * L'ID du partenaire
   */
  partner_id: string;
};

export type StructuredFormatting = {
  main_text: string;
  secondary_text: string;
};

export type PredictionDto = {
  place_id: string;
  description: string;
  structured_formatting: StructuredFormatting;
};

export type AutocompleteResponseDto = {
  predictions: Array<PredictionDto>;
};

export type EstablishmentOpeningHoursDto = {
  start_time: string;
  end_time: string;
};

export type EstablishmentOpeningDaysDto = {
  day: number;
  is_open: boolean;
  opening_hours: Array<EstablishmentOpeningHoursDto>;
};

export type EstablishmentMediaSocialLinksDto = {
  facebook?: string | null;
  instagram?: string | null;
  tiktok?: string | null;
  website?: string | null;
};

export type EstablishmentDeliveryLinksDto = {
  ifood?: string | null;
  uber_eats?: string | null;
  rappi?: string | null;
};

export type EstablishmentPictureResponseDto = {
  /**
   * The position of the picture
   */
  position: number;
  /**
   * The signed url of the picture
   */
  signedUrl: string;
};

export type EstablishmentResponseDto = {
  name: string;
  location?: PointDto;
  primary_color?: string;
  opening_days?: Array<EstablishmentOpeningDaysDto>;
  social_media_links?: EstablishmentMediaSocialLinksDto | null;
  delivery_links?: EstablishmentDeliveryLinksDto | null;
  certifications?: Array<
    'kosher' | 'halal' | 'vegetarian' | 'vegan' | 'lactose_free' | 'gluten_free' | 'bio'
  >;
  /**
   * The pictures of the establishment
   */
  pictures: Array<EstablishmentPictureResponseDto>;
  /**
   * The logo of the establishment
   */
  logo: string | null;
  id: string;
  public_establishment_id: string;
  google_place_id?: string;
  address: string;
  neighborhood?: string;
  city: string;
  cep: string;
  description?: string;
  price_range?: string;
  phone_number?: string;
  phone_country_code?: string;
};

export type UpdateEstablishmentProfileDto = {
  name?: string;
  primary_color?: string;
  opening_days?: Array<EstablishmentOpeningDaysDto>;
  social_media_links?: EstablishmentMediaSocialLinksDto | null;
  delivery_links?: EstablishmentDeliveryLinksDto | null;
  certifications?: Array<
    'kosher' | 'halal' | 'vegetarian' | 'vegan' | 'lactose_free' | 'gluten_free' | 'bio'
  >;
  description?: string;
  price_range?: string;
  phone_number?: string;
  phone_country_code?: string;
};

export type PictureDto = {
  picture?: (Blob | File) | null;
};

export type AuthControllerLoginData = {
  body: LoginDto;
  path?: never;
  query?: never;
  url: '/auth/login';
};

export type AuthControllerLoginErrors = {
  /**
   * Invalid credentials
   */
  401: unknown;
};

export type AuthControllerLoginResponses = {
  /**
   * Successfully authenticated
   */
  200: AuthResponseDto;
};

export type AuthControllerLoginResponse =
  AuthControllerLoginResponses[keyof AuthControllerLoginResponses];

export type PartnerControllerRegisterData = {
  body: CreatePartnerDto;
  path?: never;
  query?: never;
  url: '/partners/register';
};

export type PartnerControllerRegisterErrors = {
  /**
   * Bad Request.
   */
  400: unknown;
};

export type PartnerControllerRegisterResponses = {
  /**
   * The partner has been successfully created.
   */
  201: PartnerResponseDto;
};

export type PartnerControllerRegisterResponse =
  PartnerControllerRegisterResponses[keyof PartnerControllerRegisterResponses];

export type PartnerControllerGetProfileData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/partners/me';
};

export type PartnerControllerGetProfileResponses = {
  /**
   * Return the partner profile.
   */
  200: PartnerResponseDto;
};

export type PartnerControllerGetProfileResponse =
  PartnerControllerGetProfileResponses[keyof PartnerControllerGetProfileResponses];

export type PartnerControllerUpdateData = {
  body: DomainUpdatePartnerDto;
  path?: never;
  query?: never;
  url: '/partners';
};

export type PartnerControllerUpdateErrors = {
  /**
   * Bad Request.
   */
  400: unknown;
};

export type PartnerControllerUpdateResponses = {
  /**
   * The partner has been successfully updated.
   */
  200: PartnerResponseDto;
};

export type PartnerControllerUpdateResponse =
  PartnerControllerUpdateResponses[keyof PartnerControllerUpdateResponses];

export type PartnerControllerOnboardingData = {
  body: OnboardingPartnerDto;
  path?: never;
  query?: never;
  url: '/partners/onboarding';
};

export type PartnerControllerOnboardingResponses = {
  /**
   * The partner has been successfully onboarded.
   */
  200: unknown;
  201: Array<OnboardingPartnerResponseDto>;
};

export type PartnerControllerOnboardingResponse =
  PartnerControllerOnboardingResponses[keyof PartnerControllerOnboardingResponses];

export type PartnerControllerAutocompleteData = {
  body?: never;
  path?: never;
  query: {
    address: string;
  };
  url: '/partners/autocomplete';
};

export type PartnerControllerAutocompleteResponses = {
  /**
   * Returns autocomplete suggestions for an address.
   */
  200: AutocompleteResponseDto;
};

export type PartnerControllerAutocompleteResponse =
  PartnerControllerAutocompleteResponses[keyof PartnerControllerAutocompleteResponses];

export type EstablishmentControllerGetEstablishmentsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/establishments';
};

export type EstablishmentControllerGetEstablishmentsResponses = {
  /**
   * The establishments have been successfully retrieved.
   */
  200: Array<EstablishmentResponseDto>;
};

export type EstablishmentControllerGetEstablishmentsResponse =
  EstablishmentControllerGetEstablishmentsResponses[keyof EstablishmentControllerGetEstablishmentsResponses];

export type EstablishmentControllerUpdateEstablishmentProfileData = {
  body: UpdateEstablishmentProfileDto;
  path: {
    id: string;
  };
  query?: never;
  url: '/establishments/{id}/profile';
};

export type EstablishmentControllerUpdateEstablishmentProfileResponses = {
  /**
   * The establishment profile has been successfully updated.
   */
  200: EstablishmentResponseDto;
};

export type EstablishmentControllerUpdateEstablishmentProfileResponse =
  EstablishmentControllerUpdateEstablishmentProfileResponses[keyof EstablishmentControllerUpdateEstablishmentProfileResponses];

export type EstablishmentControllerUploadEstablishmentProfilePicturesData = {
  body: PictureDto;
  path: {
    id: string;
    position: number;
  };
  query?: never;
  url: '/establishments/{id}/pictures/{position}';
};

export type EstablishmentControllerUploadEstablishmentProfilePicturesResponses = {
  201: unknown;
};

export type EstablishmentControllerUploadEstablishmentLogoData = {
  body: PictureDto;
  path: {
    id: string;
  };
  query?: never;
  url: '/establishments/{id}/logo';
};

export type EstablishmentControllerUploadEstablishmentLogoResponses = {
  201: unknown;
};

export type ClientOptions = {
  baseUrl: 'http://localhost:3000' | (string & {});
};
